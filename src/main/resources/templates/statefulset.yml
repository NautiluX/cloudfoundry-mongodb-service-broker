apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${name}
  namespace: ${namespace}
spec:
  serviceName: ${name}-service
  replicas: 1
  selector:
    matchLabels:
      app: ${name}
  template:
    metadata:
      labels:
        app: ${name}
      annotations:
    spec:
      initContainers:
        - name: config
          image: "gcr.io/google_containers/mongodb-install:0.5"
          args:
            - --work-dir=/work-dir
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /config
        - name: boot
          image: mongo:3.6.3
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/work-dir/on-start.sh
            - "-service=${name}-service"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /config
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongo:3.6.3
          ports:
            - name: peer
              containerPort: 27017
          env:
            - name: MONGO_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
              - "/bin/bash"
              - "-c"
              - |
                    set -x
                    set -m
                    set -e
                    docker-entrypoint.sh mongod --config=/config/mongod.conf &
                    sleep 5
                    set +e
                    if [ "$MONGO_POD_NAME" == "${name}-0" ]; then
                      mongo admin --eval "db.createUser({ user: 'admin', pwd: 'password', roles: [{\"role\" : \"readWriteAnyDatabase\",\"db\" : \"admin\"},{\"role\" : \"userAdminAnyDatabase\",\"db\" : \"admin\"}] });"
                    fi
                    fg
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: config
              mountPath: /config
            - name: workdir
              mountPath: /work-dir
      volumes:
        - name: config
          configMap:
            name: ${name}-config
        - name: workdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: ci-storage
        resources:
          requests:
            storage: ${storage!"128Mi"}